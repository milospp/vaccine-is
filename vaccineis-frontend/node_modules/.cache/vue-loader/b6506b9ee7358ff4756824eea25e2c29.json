{"remainingRequest":"/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/src/components/ImmunizationConsentForm.vue?vue&type=template&id=8d39aec8&scoped=true&","dependencies":[{"path":"/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/src/components/ImmunizationConsentForm.vue","mtime":1645044909424},{"path":"/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1645051474149},{"path":"/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1645051467513},{"path":"/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1645051474149},{"path":"/home/dalibor/Desktop/vaccine-is/vaccineis-frontend/node_modules/vue-loader/lib/index.js","mtime":1645051467429}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}